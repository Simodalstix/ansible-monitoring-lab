# roles/prometheus/tasks/main.yml
---
- name: Determine if current host is the Prometheus server
  ansible.builtin.set_fact:
    is_prometheus_server: "{{ 'prometheus.simo.local' in inventory_hostname }}"

- name: Create Prometheus group
  ansible.builtin.group:
    name: "{{ prometheus_group }}"
    system: yes
  when: is_prometheus_server

- name: Create Prometheus user
  ansible.builtin.user:
    name: "{{ prometheus_user }}"
    group: "{{ prometheus_group }}"
    system: yes
    shell: /sbin/nologin
  when: is_prometheus_server

- name: Create Prometheus installation directory
  ansible.builtin.file:
    path: "{{ prometheus_install_dir }}"
    state: directory
    owner: "{{ prometheus_user }}"
    group: "{{ prometheus_group }}"
    mode: "0755"
  when: is_prometheus_server

- name: Create Prometheus data directory
  ansible.builtin.file:
    path: "{{ prometheus_data_path }}"
    state: directory
    owner: "{{ prometheus_user }}"
    group: "{{ prometheus_group }}"
    mode: "0755"
  when: is_prometheus_server

- name: Download and unarchive Prometheus
  ansible.builtin.unarchive:
    src: "{{ prometheus_base_url }}"
    dest: "/tmp"
    remote_src: yes
  when: is_prometheus_server

- name: Copy Prometheus binaries
  ansible.builtin.copy:
    src: "/tmp/prometheus-{{ prometheus_version }}.linux-amd64/{{ item }}"
    dest: "{{ prometheus_install_dir }}/{{ item }}"
    remote_src: yes
    owner: "{{ prometheus_user }}"
    group: "{{ prometheus_group }}"
    mode: "0755"
  loop:
    - prometheus
    - promtool
  when: is_prometheus_server

- name: Create Prometheus configuration file
  ansible.builtin.template:
    src: prometheus.yml.j2
    dest: "{{ prometheus_config_path }}"
    owner: "{{ prometheus_user }}"
    group: "{{ prometheus_group }}"
    mode: "0644"
  when: is_prometheus_server
  notify: Restart prometheus

- name: Create Prometheus systemd service file
  ansible.builtin.template:
    src: prometheus.service.j2
    dest: /etc/systemd/system/prometheus.service
    owner: root
    group: root
    mode: "0644"
  when: is_prometheus_server
  notify: Reload systemd && Restart prometheus

- name: Enable and start Prometheus service
  ansible.builtin.systemd:
    name: prometheus
    state: started
    enabled: yes
  when: is_prometheus_server

# --- Node Exporter Tasks (for all Linux hosts in the group) ---

- name: Create node_exporter group
  ansible.builtin.group:
    name: "{{ node_exporter_group }}"
    system: yes

- name: Create node_exporter user
  ansible.builtin.user:
    name: "{{ node_exporter_user }}"
    group: "{{ node_exporter_group }}"
    system: yes
    shell: /sbin/nologin

- name: Create node_exporter installation directory
  ansible.builtin.file:
    path: "{{ node_exporter_install_dir }}"
    state: directory
    owner: "{{ node_exporter_user }}"
    group: "{{ node_exporter_group }}"
    mode: "0755"

- name: Download and unarchive Node Exporter
  ansible.builtin.unarchive:
    src: "{{ node_exporter_base_url }}"
    dest: "/tmp"
    remote_src: yes

- name: Copy Node Exporter binary
  ansible.builtin.copy:
    src: "/tmp/node_exporter-{{ node_exporter_version }}.linux-amd64/node_exporter"
    dest: "{{ node_exporter_install_dir }}/node_exporter"
    remote_src: yes
    owner: "{{ node_exporter_user }}"
    group: "{{ node_exporter_group }}"
    mode: "0755"

- name: Create Node Exporter systemd service file
  ansible.builtin.template:
    src: node_exporter.service.j2
    dest: /etc/systemd/system/node_exporter.service
    owner: root
    group: root
    mode: "0644"
  notify: Reload systemd && Restart node_exporter

- name: Enable and start Node Exporter service
  ansible.builtin.systemd:
    name: node_exporter
    state: started
    enabled: yes
