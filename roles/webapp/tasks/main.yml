---
- name: Create Django project directory
  file:
    path: "{{ app_dir }}"
    state: directory
    owner: "{{ app_user }}"
    group: "{{ app_user }}"
    mode: '0755'

- name: Create virtual environment
  pip:
    name: pip
    virtualenv: "{{ app_dir }}/venv"
    virtualenv_python: python3
  become_user: "{{ app_user }}"

- name: Install Django and dependencies
  pip:
    name:
      - django
      - psycopg2-binary
      - gunicorn
    virtualenv: "{{ app_dir }}/venv"
  become_user: "{{ app_user }}"

- name: Create Django project
  django_manage:
    command: startproject
    name: "{{ app_name }}"
    path: "{{ app_dir }}"
    virtualenv: "{{ app_dir }}/venv"
  become_user: "{{ app_user }}"
  args:
    creates: "{{ app_dir }}/{{ app_name }}"

- name: Create polls app
  django_manage:
    command: startapp
    name: polls
    path: "{{ app_dir }}/{{ app_name }}"
    virtualenv: "{{ app_dir }}/venv"
  become_user: "{{ app_user }}"
  args:
    creates: "{{ app_dir }}/{{ app_name }}/polls"

- name: Configure Django settings
  template:
    src: settings.py.j2
    dest: "{{ app_dir }}/{{ app_name }}/{{ app_name }}/settings.py"
    owner: "{{ app_user }}"
    group: "{{ app_user }}"

- name: Run Django migrations
  django_manage:
    command: migrate
    app_path: "{{ app_dir }}/{{ app_name }}"
    virtualenv: "{{ app_dir }}/venv"
  become_user: "{{ app_user }}"

- name: Create Django superuser
  django_manage:
    command: "shell -c \"from django.contrib.auth.models import User; User.objects.create_superuser('admin', 'admin@example.com', 'admin') if not User.objects.filter(username='admin').exists() else None\""
    app_path: "{{ app_dir }}/{{ app_name }}"
    virtualenv: "{{ app_dir }}/venv"
  become_user: "{{ app_user }}"

- name: Create systemd service for Django
  template:
    src: django.service.j2
    dest: /etc/systemd/system/django.service
  notify: restart django

- name: Start and enable Django service
  systemd:
    name: django
    state: started
    enabled: yes
    daemon_reload: yes